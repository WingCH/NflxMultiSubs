(()=>{var e={775:e=>{e.exports={upperBaselinePos:.15,lowerBaselinePos:.85,primaryImageScale:.75,primaryImageOpacity:1,primaryTextScale:.95,primaryTextOpacity:1,primaryTextColor:"#ffffff",secondaryImageScale:.5,secondaryImageOpacity:1,secondaryTextScale:1,secondaryTextStroke:2,secondaryTextOpacity:1,secondaryTextColor:"#ffffff",secondaryLanguageMode:"audio",secondaryLanguageLastUsed:void 0,secondaryLanguageLastUsedIsCaption:void 0}}},t={};function s(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,s),a.exports}(()=>{const e=s(775);let t=Object.assign({},e);function n(t){return Object.keys(e).every((e=>e in t))}function o(){t.primaryImageOpacity=1,t.primaryTextOpacity=1,t.secondaryImageOpacity=1,t.secondaryTextOpacity=1,chrome.storage.local.set({settings:t},(()=>{console.log("Settings: saved into local storage")}))}chrome.storage.local.get(["settings"],(e=>{console.log("Loaded: settings=",e.settings),e.settings&&n(e.settings)?t=e.settings:o()}));let a={};function c(){Object.keys(a).map((e=>a[e])).forEach((e=>{try{e.postMessage({settings:t})}catch(e){console.error("Error: cannot dispatch settings,",e)}}))}browser.runtime.onConnectExternal.addListener((s=>function(s){const i=s.sender&&s.sender.tab&&s.sender.tab.id;i&&(a[i]=s,console.log(`Connected: ${i} (tab)`),s.postMessage({settings:t}),s.onMessage.addListener((a=>{if(a.settings){console.log("Received from injected agent: settings=",a.settings);let i=Object.assign({},t);i=Object.assign(i,a.settings),n(i)?t=i:(t=Object.assign({},e),s.postMessage({settings:t})),o(),c()}else a.startPlayback?(console.log("Saturate icon"),function(e){chrome.browserAction.setIcon({tabId:e,path:{16:"icon16.png",32:"icon32.png"}})}(i)):a.stopPlayback&&(console.log("Desaturate icon"),function(e){chrome.browserAction.setIcon({tabId:e,path:{16:"icon16-gray.png",32:"icon32-gray.png"}})}(i))})),s.onDisconnect.addListener((()=>{delete a[i],console.log(`Disconnected: ${i} (tab)`)})))}(s))),browser.runtime.onConnect.addListener((s=>function(s){const a=s.name;console.log(`Connected: ${a} (internal)`),"settings"===a&&(s.postMessage({settings:t}),s.onMessage.addListener((a=>{if(a.settings){console.log("Received: settings=",a.settings);let o=Object.assign({},t);o=Object.assign(o,a.settings),n(o)?t=o:(t=Object.assign({},e),s.postMessage({settings:t}))}else t=Object.assign({},e),s.postMessage({settings:t});o(),c()}))),s.onDisconnect.addListener((()=>{console.log(`Disconnected: ${a} (internal)`)}))}(s)))})()})();